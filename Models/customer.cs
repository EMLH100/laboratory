using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laboratory.Models
{
    internal class customer : I_Model<customer>
    {
        private static readonly string _DATABASE_TABLE_NAME = "dbo.customer";
        //!!! verify char[] length for EOL char
        private Int32 _id;                          //int
        private char[] _firstName = new char[50];   //varchar(50)
        private char[] _lastName = new char[50];    //varchar(50)
        private char[] _email = new char[128];      //varchar(128)
        private DateTime _createAt;                 //datetime
        private DateTime _deleteAt;                 //datetime

        // -- Get/Set -- //
        public Int32 Id { get; set; }
        public char[] FirstName { get; set; }
        public char[] LastName { get; set; }
        public char[] Email { get; set; }
        public DateTime CreateAt { get; set; }
        public DateTime DeleteAt { get; set; }

        // -- Constructor -- //
        public customer(char[] email) : this(email, null, null) //!!! empty char[] or use string ???
        {
            this.Email = email;
        }
        public customer(char[] email, char[] firstname, char[] lastname)
        {
            this.Email = email;
            this.FirstName = firstname;
            this.LastName = lastname;
        }

        // -- Methods -- //
        public customer GetById()
        {
            return null;
        }
        public customer Insert()
        {
            if (this.Id > 0)
            {
                throw new Exception($"Cannot use method {this.GetType().FullName}.Insert() : Id value is not 0 [{this.Id}].");
            }


            // Create the INSERT statement. We do not pass any Id value since this is insertion
            // and the id is auto-generated by the database on insertion (identity).
            string statement =
                $"INSERT INTO {_DATABASE_TABLE_NAME} (firstName, lastName, email, createdAt) " +
                "VALUES (@firstName, @lastName, @email, @createdAt); SELECT CAST(SCOPE_IDENTITY() AS int);"
            ;
            //SqlCommand cmd = connection.CreateCommand(); // no > connection
            //cmd.CommandText = statement;


            /**********************
            // Create and add parameters
            SqlParameter firstNameParam = cmd.CreateParameter();
            firstNameParam.ParameterName = "@firstName";
            firstNameParam.DbType = DbType.String;
            if (String.IsNullOrEmpty(this.FirstName))
            {
                firstNameParam.Value = DBNull.Value;
            }
            else
            {
                firstNameParam.Value = this.FirstName;
            }
            cmd.Parameters.Add(firstNameParam);

            SqlParameter lastNameParam = cmd.CreateParameter();
            lastNameParam.ParameterName = "@lastName";
            lastNameParam.DbType = DbType.String;
            if (String.IsNullOrEmpty(this.LastName))
            {
                lastNameParam.Value = DBNull.Value;
            }
            else
            {
                lastNameParam.Value = this.LastName;
            }
            cmd.Parameters.Add(lastNameParam);

            SqlParameter emailParam = cmd.CreateParameter();
            emailParam.ParameterName = "@email";
            emailParam.DbType = DbType.String;
            emailParam.Value = this.Email;
            cmd.Parameters.Add(emailParam);

            SqlParameter createdAtParam = cmd.CreateParameter();
            createdAtParam.ParameterName = "@createdAt";
            createdAtParam.DbType = DbType.DateTime;
            createdAtParam.Value = createTime;
            cmd.Parameters.Add(createdAtParam);

            connection.Open();
            this.Id = (Int32)cmd.ExecuteScalar();
            this.CreatedAt = createTime;

            return this;
            */
            return null;
        }
        public customer Update()
        {
            return null;
        }
        public void Delete()
        {
            //
        }
    }
}

/*
public Customer Insert() {
    if (this.Id > 0) {
        // Id has been set, cannot insert a product with a specific Id without risking
        // to mess up the database.
        throw new Exception($"Cannot use method {this.GetType().FullName}.Insert() : Id value is not 0 [{this.Id}].");
    }

    using (SqlConnection connection = DbUtils.GetDefaultConnection()) {

        // define the time of the creation (now). We will use it to set the value in the DB and
        // in the object here
        DateTime createTime = DateTime.Now;

        // Create the INSERT statement. We do not pass any Id value since this is insertion
        // and the id is auto-generated by the database on insertion (identity).
        string statement = $"INSERT INTO {DATABASE_TABLE_NAME} (firstName, lastName, email, createdAt) " +
        "VALUES (@firstName, @lastName, @email, @createdAt); SELECT CAST(SCOPE_IDENTITY() AS int);";
        SqlCommand cmd = connection.CreateCommand();
        cmd.CommandText = statement;

        // Create and add parameters
        SqlParameter firstNameParam = cmd.CreateParameter();
        firstNameParam.ParameterName = "@firstName";
        firstNameParam.DbType = DbType.String;
        if (String.IsNullOrEmpty(this.FirstName)) {
        firstNameParam.Value = DBNull.Value;
        } else {
        firstNameParam.Value = this.FirstName;
        }
        cmd.Parameters.Add(firstNameParam);

        SqlParameter lastNameParam = cmd.CreateParameter();
        lastNameParam.ParameterName = "@lastName";
        lastNameParam.DbType = DbType.String;
        if (String.IsNullOrEmpty(this.LastName)) {
        lastNameParam.Value = DBNull.Value;
        } else {
        lastNameParam.Value = this.LastName;
        }
        cmd.Parameters.Add(lastNameParam);

        SqlParameter emailParam = cmd.CreateParameter();
        emailParam.ParameterName = "@email";
        emailParam.DbType = DbType.String;
        emailParam.Value = this.Email;
        cmd.Parameters.Add(emailParam);

        SqlParameter createdAtParam = cmd.CreateParameter();
        createdAtParam.ParameterName = "@createdAt";
        createdAtParam.DbType = DbType.DateTime;
        createdAtParam.Value = createTime;
        cmd.Parameters.Add(createdAtParam);

        connection.Open();
        this.Id = (Int32)cmd.ExecuteScalar();
        this.CreatedAt = createTime;

        return this;

    }
}
*/